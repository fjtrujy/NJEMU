name: PS2 CMAKE

on:
  push:
    branches: 
      - '*'
    tags:
      - v*
  pull_request:
  repository_dispatch:
    types: [run_build]

jobs:
  build:
    name: ${{ matrix.target }} LARGE_MEMORY=${{ matrix.large_memory }} COMMAND_LIST=${{ matrix.command_list }} ADHOC=${{ matrix.adhoc }} SAVE_STATE=${{ matrix.save_state }} NO_GUI=${{ matrix.no_gui }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [MVS] #TOOD: CPS1, CPS2, NCDZ
        large_memory: [OFF] #TODO: ON
        command_list: [OFF] #TODO: ON
        adhoc: [OFF] #TODO: ON
        save_state: [OFF] #TODO: OFF
        no_gui: [ON] #TODO: OFF
        exclude:
          - target: NCDZ
            adhoc: ON
          - adhoc: ON
            save_state: FALSE
      fail-fast: false

    container: ps2dev/ps2dev:latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apk add build-base git bash cmake
    
    - name: Compile custom ps2sdk branch
      run: |
        git clone https://github.com/fjtrujy/ps2sdk.git
        cd ps2sdk
        git checkout srxfixup_u
        make -j $(getconf _NPROCESSORS_ONLN) clean
        make -j $(getconf _NPROCESSORS_ONLN) install

    - name: Compile custom ps2_driver branch
      run: |
        git clone https://github.com/fjtrujy/ps2_drivers.git
        cd ps2_drivers
        git checkout mx4sio
        make -j $(getconf _NPROCESSORS_ONLN) clean
        make -j $(getconf _NPROCESSORS_ONLN) install

    - name: Compile project
      run: |
        mkdir build
        cd build
        cmake -DPLATFORM="PS2" \
          -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/share/ps2dev.cmake \
          -DTARGET="${{ matrix.target }}" \
          -DLARGE_MEMORY=${{ matrix.large_memory }} \
          -DCOMMAND_LIST=${{ matrix.command_list }} \
          -DADHOC=${{ matrix.adhoc }} \
          -DSAVE_STATE=${{ matrix.save_state }} \
          ..
        make -j $(getconf _NPROCESSORS_ONLN)
        mv ${{ matrix.target }} ${{ matrix.target }}.elf

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: NJEMU-${{ steps.slug.outputs.sha8 }}-${{ matrix.target }}-large_memory_${{ matrix.large_memory }}-command_list_${{ matrix.command_list }}-adhoc_${{ matrix.adhoc }}-save_state${{ matrix.save_state }}
        path: |
          build/*.elf